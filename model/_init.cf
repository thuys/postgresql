entity Postgres extends ip::services::Server:
    string port = "5432"
    string datadir = "/var/lib/pgsql/data"
    string socketdir = "/var/run/postgresql"
end

entity PgpoolNode extends Postgres:
    """The node for a distributed one"""
end

entity PgpoolMain extends ip::services::Server:
    """The access for a distributed one"""
    string port = "5432"
end


PgpoolMain pgpoolMain [1] -- [1:] PgpoolNode pgpoolNodes

"""Pgpool pgPool [1] -- [0:1] PgpoolNode node
Pgpool pgPool [1] -- [0:1] PgpoolMain main"""

implement Postgres using postgresImpl

implement PgpoolNode using postgresImpl, pgpoolNodeImpl

implement PgpoolMain using pgpoolMainImpl


implementation postgresImpl:
    
    pkg = std::Package(host = host, name = "postgresql-server", state = "installed")
    
    createServiceFile = std::File(host = host, path = "/lib/systemd/system/postgresql_create.service", owner = "root",
        group = "root", mode = 755, requires = script_file, content = file("postgresql/postgresql_create.service"))

    script_file = std::File(host = host, path = "/usr/bin/postgresql_create", owner = "root", group = "root",
        mode = 755, content = file("postgresql/postgresql_create"))
    
    createService = std::Service(host = host, name = "postgresql_create", state = "running", onboot = true,
        requires = [pkg, createServiceFile, script_file])
    
    serviceFile = std::ConfigFile(host = host, path = "/lib/systemd/system/postgresql.service", requires = createService, content = template("postgresql/postgresql.service.tmpl"), reload = true)
    configFile = std::File(host = host, path = "/var/lib/pgsql/data/postgresql.conf", requires = createService, content = template("postgresql/postgresql.conf.tmpl"), reload = true, owner="postgres", group="postgres", mode = 755)

    svc = std::Service(host = host, name = "postgresql", state = "running", onboot = true)
    svc.requires = [createService, configFile, serviceFile]
end

implementation pgpoolNodeImpl:    
    pkgNode = std::Package( host = host, name = "postgresql-pgpool-II", state = "installed")
    unit_fileNode = std::File(host = host, path = "/lib/systemd/system/postgresql_create_root.service", owner = "root",
        group = "root", mode = 755, content = file("postgresql/postgresql_create_root.service"))

    script_fileNode = std::File(host = host, path = "/usr/bin/postgresql_create_root", owner = "root", group = "root",
        mode = 755, content = file("postgresql/postgresql_create_root"))
    
    svc_fileNode = std::Service(host = host, name = "postgresql_create_root", state = "running", onboot = true,
        requires = [pkgNode, unit_fileNode, script_fileNode])
    svc_fileNode.requires = std::Service[host = host, name = "postgresql"]
    
    accessFileNode = std::File(host = host, path = "/var/lib/pgsql/data/pg_hba.conf", requires = svc_fileNode, content = template("postgresql/pg_hba.conf.tmpl"), owner="postgres", group="postgres", mode = 755)
    accessFileNode.requires = std::Service[host = host, name = "postgresql_create"]
end

implementation pgpoolMainImpl:
    pkg = std::Package(host = host, name = "postgresql-server", state = "installed")
    pkgMain = std::Package( host = host, name = "postgresql-pgpool-II", state = "installed")
    configFileMain = std::ConfigFile(host = host, path = "/etc/pgpool-II/pgpool.conf", 
                                     requires = pkgMain, content = template("postgresql/pgpool.conf.tmpl"), reload = true)
    
    pcpFileMain = std::ConfigFile(host = host, path = "/etc/pgpool-II/pcp.conf", 
                                  requires = pkgMain, content = template("postgresql/pcp.conf.tmpl"), reload = true)
    
    directory = std::DefaultDirectory(host = host, path="/var/run/pgpool", reload = true)
    
    svcMain = std::Service(host = host, name = "pgpool", state = "running", onboot = true)
    svcMain.requires = [pkgMain, configFileMain, pcpFileMain, directory]
end