entity Postgres extends ip::services::Server:
    string port = "5432"
    string datadir = "/var/lib/pgsql/data"
    string socketdir = "/var/run/postgresql"
end

entity PgpoolNode extends Postgres:
    """The node for a distributed one"""
end

entity PgpoolMain extends ip::services::Server:
    """The access for a distributed one"""
    string port = "5432"
end

entity Pgpool:
    """Has the pgpool in """
end

PgpoolMain pgpoolMain [1] -- [1:] PgpoolNode pgpoolNodes

"""Pgpool pgPool [1] -- [0:1] PgpoolNode node
Pgpool pgPool [1] -- [0:1] PgpoolMain main"""

implement Postgres using postgresImpl

implement Pgpool using pgpoolImpl

implement PgpoolNode using pgpoolNodeImpl
implement PgpoolMain using pgpoolMainImpl


implementation postgresImpl:
    pkg = std::Package(host = host, name = "postgresql-server", state = "installed")
    
    unit_file = std::File(host = host, path = "/lib/systemd/system/postgresql_create.service", owner = "root",
        group = "root", mode = 644, requires = script_file, content = file("mysql/mysql_create_db.service"))

    script_file = std::File(host = host, path = "/usr/bin/postgresql_create", owner = "root", group = "root",
        mode = 755, content = file("mysql/mysql_create_db"))
    
    svc_file = std::Service(host = host, name = "postgresql_create", state = "running", onboot = true,
        requires = [svc, unit_file, script_file])
    
    configFile = std::ConfigFile(host = host, path = "/var/lib/pgsql/data/postgresql.conf", requires = svc_file, content = file("postgresql/postgresql.conf.tmpl"))
        
    svc = std::Service(host = host, name = "postgresql", state = "running", onboot = true)
    svc.requires = [pkg, svc_file, configFile]
end

implementation pgpoolImpl:
    pkg = std::Package( host = host, name = "postgresql-pgpool-II", state = "installed")
end

implementation pgpoolNodeImpl:    
    pkg = std::Package( host = host, name = "postgresql-pgpool-II", state = "installed")
    unit_file = std::File(host = host, path = "/lib/systemd/system/pgpool_node_create.service", owner = "root",
        group = "root", mode = 755, requires = script_file, content = file("mysql/pgpool_node_create.service"))

    script_file = std::File(host = host, path = "/usr/bin/pgpool_node_create", owner = "root", group = "root",
        mode = 755, content = file("mysql/pgpool_node_create"))
    
    svc_file = std::Service(host = host, name = "pgpool_node_create", state = "running", onboot = true,
        requires = [pkg, unit_file, script_file])
    
    accessFile = std::ConfigFile(host = host, path = "/var/lib/pgsql/data/pg_hba.conf", requires = svc_file, content = file("postgresql/pg_hba.conf.tmpl"))   
end

implementation pgpoolMainImpl:
    pkg = std::Package( host = jpst, name = "postgresql-pgpool-II", state = "installed")
    configFile = std::ConfigFile(host = host, path = "/etc/pgpool-II/pgpool.conf", requires = pkg, content = file("postgresql/pgpool.conf.tmpl"))
    
    pcpFile = std::ConfigFile(host = host, path = "/etc/pgpool-II/pcp.conf", requires = pkg, content = file("postgresql/pcp.conf.tmpl"))
    
    svc = std::Service(host = host, name = "pgpool", state = "running", onboot = true)
    svc.requires = [pkg, configFile, pcpFile]
end