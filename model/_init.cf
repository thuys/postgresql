entity PostgresqlBasic extends ip::services::Server:
    
end

entity PostgresqlServer extends ip::services::Server:
    string port = "5432"
    string datadir = "/var/lib/pgsql/data"
    string socketdir = "/var/run/postgresql"
end

entity PgpoolNode extends PostgresqlServer:
    """The node for a distributed one"""
end

entity PgpoolMain extends ip::services::Server:
    """The access for a distributed one"""
    string port = "5432"
end


PgpoolMain pgpoolMain [1] -- [1:] PgpoolNode pgpoolNodes

"""Pgpool pgPool [1] -- [0:1] PgpoolNode node
Pgpool pgPool [1] -- [0:1] PgpoolMain main"""

implement PostgresqlBasic using postgresBasic
implement PostgresqlServer using postgresImpl

implement PgpoolNode using postgresImpl, pgpoolNodeImpl

implement PgpoolMain using pgpoolMainImpl

implementation postgresBasic:
    pkg = std::Package(host = host, name = "postgresql", state = "installed")
end 

implementation postgresImpl:
    
    pkg = std::Package(host = host, name = "postgresql-server", state = "installed")
    
    createServiceFile = std::File(host = host, path = "/lib/systemd/system/postgresql_create.service", owner = "root",
        group = "root", mode = 755, requires = script_file, content = file("postgresql/postgresql_create.service"))

    script_file = std::File(host = host, path = "/usr/bin/postgresql_create", owner = "root", group = "root",
        mode = 755, content = file("postgresql/postgresql_create"))
    
    createService = std::Service(host = host, name = "postgresql_create", state = "running", onboot = true,
        requires = [pkg, createServiceFile, script_file])
    
    serviceFile = std::ConfigFile(host = host, path = "/lib/systemd/system/postgresql.service", requires = createService, content = template("postgresql/postgresql.service.tmpl"), reload = true)
    configFile = std::File(host = host, path = "/var/lib/pgsql/data/postgresql.conf", requires = createService, content = template("postgresql/postgresql.conf.tmpl"), reload = true, owner="postgres", group="postgres", mode = 755)

    svc = std::Service(host = host, name = "postgresql", state = "running", onboot = true)
    svc.requires = [createService, configFile, serviceFile]
    svc.requires = std::File[host = host, path = "/var/lib/pgsql/data/pg_hba.conf"]
end

implementation pgpoolNodeImpl:    
    tar = std::Package( host = host, name = "tar", state = "installed")
    gcc = std::Package( host = host, name = "gcc", state = "installed")
    wget = std::Package( host = host, name = "wget", state = "installed")
    postgresql-devel = std::Package( host = host, name = "postgresql-devel", state = "installed")
    make = std::Package( host = host, name = "make", state = "installed")
    
    rootServiceFile = std::File(host = host, path = "/lib/systemd/system/postgresql_create_root.service", owner = "root",
        group = "root", mode = 755, content = file("postgresql/postgresql_create_root.service"))

    rootScriptFile = std::File(host = host, path = "/usr/bin/postgresql_create_root", owner = "root", group = "root",
        mode = 755, content = file("postgresql/postgresql_create_root"))
    
    rootService = std::Service(host = host, name = "postgresql_create_root", state = "running", onboot = true, 
                               requires = [rootServiceFile, rootScriptFile])
    rootService.requires = std::Service[host = host, name = "postgresql"]
    
    
    pgPoolServiceFile = std::File(host = host, path = "/lib/systemd/system/pgpool-install.service", owner = "root",
        group = "root", mode = 755, content = file("postgresql/pgpool-install.service"))

    pgPoolScriptFile = std::File(host = host, path = "/usr/bin/pgpool-install", owner = "root", group = "root",
        mode = 755, content = file("postgresql/pgpool-install"))
    
    pgPoolService = std::Service(host = host, name = "pgpool-install", state = "running", onboot = true, 
                                 requires = [pgPoolServiceFile, pgPoolScriptFile, rootService])
    pgPoolService.requires = std::Service[host = host, name = "postgresql"]
    
    
    recoveryStage1 = std::File(host = host, path = "{{ datadir }}/copy-base-backup", owner = "root",
        group = "root", mode = 755, content = file("postgresql/copy-base-backup"))

    recoveryStage2 = std::File(host = host, path = "{{ datadir }}/pgpool_recovery_pitr", owner = "root",
        group = "root", mode = 755, content = file("postgresql/pgpool_recovery_pitr"))
    
    remoteStart = std::File(host = host, path = "{{ datadir }}/pgpool_remote_start", owner = "root",
        group = "root", mode = 755, content = file("postgresql/pgpool_remote_start"))        
    
    accessFileNode = std::File(host = host, path = "/var/lib/pgsql/data/pg_hba.conf", content = template("postgresql/pg_hba.conf.tmpl"), 
                               owner="postgres", group="postgres", mode = 755, reload = true)
    accessFileNode.requires = std::Service[host = host, name = "postgresql_create"]
end

implementation pgpoolMainImpl:
    pkg = std::Package(host = host, name = "postgresql-server", state = "installed")
    
    pkgMain = std::Package( host = host, name = "postgresql-pgpool-II", state = "installed", requires=pkg)
    configFileMain = std::ConfigFile(host = host, path = "/etc/pgpool-II/pgpool.conf", 
                                     requires = pkgMain, content = template("postgresql/pgpool.conf.tmpl"), reload = true)
    
    pcpFileMain = std::ConfigFile(host = host, path = "/etc/pgpool-II/pcp.conf", 
                                  requires = pkgMain, content = template("postgresql/pcp.conf.tmpl"), reload = true)
    
    directory = std::Directory(host = host, path="/var/run/pgpool", owner = "root", group = "root", mode = 755, reload = true)
    
    svcMain = std::Service(host = host, name = "pgpool", state = "running", onboot = true)
    svcMain.requires = [pkgMain, configFileMain, pcpFileMain, directory]
end